--table of all the users on the app
--userid is username
CREATE TABLE IF NOT EXISTS allusers (
userid varchar(16) not null unique,
phoneno bigint primary key,
password varchar(12) not null
);

--table of all the products ever listed
-- change price to decimal
CREATE TABLE IF NOT EXISTS products (
productid INT GENERATED BY DEFAULT AS IDENTITY 
    (START WITH 1 INCREMENT BY 1) primary key,
sellerid varchar(16) not null,
name varchar(64) not null,
description varchar(256) not null,
price decimal not null check(price>0),
category varchar(32) constraint category CHECK(category = 'dessert' OR category='ready meals' OR category='pastries' OR category='drinks'),
allergen varchar(32) not null,
minorder int not null check(minorder>=0),
foreign key(sellerid) references allusers(userid),
unique(productid, sellerid)
);

--table of all the order details/transaction details
CREATE TABLE IF NOT EXISTS transactions (
orderid INT GENERATED BY DEFAULT AS IDENTITY 
    (START WITH 1 INCREMENT BY 1) primary key,
b_id varchar(16) not null,
s_id varchar(16) not null,
p_id int references products(productid),
qty int not null check(qty>0),
delivery varchar(12) not null check(delivery='self pickup' OR delivery='delivery'),
status varchar(10) not null check(status='pending' OR status='confirmed'),
foreign key(b_id) references allusers(userid),
foreign key(s_id, p_id) references products(sellerid, productid),
check(not b_id = s_id)
);




--table to track which users bought products before
--user inserted when user inserts into transaction table -> trigger
--product id is integer i.e. 01245
CREATE TABLE IF NOT EXISTS buyers (
b_id varchar(16) primary key
);

--TRIGGER TO ADD USER INTO BUYER TABLE

CREATE OR REPLACE FUNCTION new_buyer()
  RETURNS trigger AS
$$
BEGIN
         INSERT INTO buyers(b_id)
         VALUES(NEW.b_id) on conflict do nothing;
 
    RETURN NEW;
END;
$$
LANGUAGE 'plpgsql';

CREATE TRIGGER update_buyers
  AFTER INSERT
  ON transactions
  FOR EACH ROW
  EXECUTE PROCEDURE new_buyer();


--table of all users who have ever sold a product
-- users inserted into this table when a product is inserted into the products table -> trigger
CREATE TABLE IF NOT EXISTS sellers (
s_id varchar(16) primary key
);

--TRIGGER TO ADD USER INTO SELLER TABLE
CREATE OR REPLACE FUNCTION new_seller()
  RETURNS trigger AS
$$
BEGIN
         INSERT INTO sellers(s_id)
         VALUES(NEW.sellerid) on conflict do nothing;
 
    RETURN NEW;
END;
$$
LANGUAGE 'plpgsql';

CREATE TRIGGER update_sellers
  AFTER INSERT
  ON products
  FOR EACH ROW
  EXECUTE PROCEDURE new_seller();


--if we delete the product then user still a seller

--TRIGGER TO CHANGE STATUS
CREATE OR REPLACE FUNCTION updatestatus()
RETURNS trigger AS
$$
declare
	total INT;
	minord INT;

BEGIN
	select sum(qty) from transactions where p_id=new.p_id into total;
	select minorder from products where productid=new.p_id into minord;
	if total >= minord then 
	UPDATE transactions SET status = 'confirmed' WHERE p_id = new.p_id;
	RETURN new; 
	end if;
	RETURN new;
END;
$$
 LANGUAGE 'plpgsql';

CREATE TRIGGER statusupdate
AFTER INSERT
ON transactions
FOR EACH ROW
EXECUTE PROCEDURE updatestatus();



--DROPPING ignore
DELETE FROM allusers;
DELETE FROM transactions;

drop trigger if exists statusupdate on transactions;

DROP TRIGGER update_buyers on transactions;

DROP TABLE IF EXISTS allusers;
DROP TABLE IF EXISTS products;
DROP TABLE IF EXISTS transactions;
DROP TABLE IF EXISTS sellers;
DROP TABLE IF EXISTS buyers;

DROP TRIGGER IF EXISTS update_sellers on products;


--INSERTING TRIAL (ignore)
INSERT INTO transactions(b_id, s_id, p_id, qty, delivery, status) VALUES('sehun','baekhyun', 1, 2,'delivery', 'pending');
INSERT INTO transactions(b_id, s_id, p_id, qty, delivery, status) VALUES('onew','kyungsoo', 4, 2,'delivery', 'pending');
INSERT INTO transactions(b_id, s_id, p_id, qty, delivery, status) VALUES('onew','kyungsoo', 4, 2,'delivery', 'pending');

INSERT INTO transactions(b_id, s_id, p_id, qty, delivery, status) VALUES('onew','sehun',5,10,'delivery', 'pending');

INSERT INTO transactions(b_id, s_id, p_id, qty, delivery, status) VALUES('sehun', 'onew', 2, 20, 'self pickup', 'pending');


INSERT INTO products(sellerid, name, description, category, allergen, price, minorder) VALUES('baekhyun', 'cookies', 'chocolate', 'dessert', 'nut-free',3, 0);
INSERT INTO products(sellerid, name, description, category, allergen, price, minorder) VALUES('kyungsoo', 'cookies', 'chocolate', 'dessert', 'nut-free',2, 0);
INSERT INTO products(sellerid, name, description, category, allergen,price, minorder) VALUES('sehun', 'pie', 'apple', 'dessert', 'nut-free',1, 5);
INSERT INTO products(sellerid, name, description, category, allergen,price, minorder) VALUES('onew', 'brownie', 'mochi brownies', 'dessert', 'none', 4, 30);

INSERT INTO allusers VALUES('baekhyun', 90897162, 'password');
INSERT INTO allusers VALUES('kyungsoo', 12345678, 'exodo');
INSERT INTO allusers VALUES('sehun', 87654321, 'exosehun');
INSERT INTO allusers VALUES('onew', 12141989, 'shinee');


-- TESTING
SELECT * FROM public.products;
SELECT * FROM public.allusers;
SELECT * FROM public.sellers;
SELECT * FROM public.buyers;
SELECT * FROM public.transactions;

SELECT COUNT(DISTINCT b_id)
from transactions


select sum(qty)
from transactions 
where p_id=5;

